#!/bin/bash
# 
# spark_read_iters [logfile1 logfile2 ...]
#
# Read the timestamps in a file with format:
# timestamp<field_sep>dat<field_sep>dat ...
# 
# For example,
# 013449549:23.97:sunny:hot
# 013449579:25.97:windy:hotter
#
# Using a specified extended regular expression, read the
# timestamps of the lines with matches and treat them as
# the boundaries of an iteration in the stdout of an iterative
# program.
#
# These timestamps are then used by 
# filter_metrics
# to generate the ganglia metrics for each iteration, and store
# these to:
#		$outputdir/$iter_dir_prefix$N
# where N is the iteration number, starting from 0.
#
# A delay may be specified, shifting t1 and t2 as:
# t1' = t1 - delay
# t2' = t2 + delay
# This is just to see things a bit better if clipping happens;
# head or tail can be run on the resuling data for truncation.
#
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Mon 16 Feb 2015 12:27:51 AM EST
# Last Modified: Mon 16 Feb 2015 12:59:42 AM EST
# =================================================

. spark_vars

SCRIPT_NAME=$(basename $0)
msg () {
	echo "$SCRIPT_NAME: $@" 1>&2
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}

get_num_matches () {
	grep -E "$regexp" "$1" | wc -l
}

get_times() {
	n=$(get_num_matches $1)
	if [ "$n" -gt 0 ]; then
		grep -E "$regexp" "$1" | cut -d "$field_sep" -f1
	else
		echo
	fi
}

# for each match of the given regexp, print the iteration metrics
print_metrics_per_iteration()
{
	# create an array of times
	read -a <<< $(get_times $file) times

	num_matches=${#times[@]}
	if [ "$num_matches" -eq 0 ]; then
		error "No matches found for $regexp in $file"
		return 1
	fi

	for k in $(seq 0 $((num_matches-2)) ); do
		t1=${times[$k]}
		t2=${times[$((k+1))]}

		pair="-1 $((t1-delay)) -2 $((t2+delay))"

		# get a new dirname, but don't create it (-d[ry_run] flag)
		iter_dir="$(newdir -t '' -d "$outputdir/$iter_dir_prefix")"
		if ((k==0)) && [ -d "$iter_dir" ]; then
			error "$iter_dir already exists; remove it first to replace its contents"
			exit 1
		fi

		mkdir -p "$iter_dir"

		d_flag="-d $iter_dir"
		s_flag="-s $suffix"
		m_flag="-m '$metrics' "

		_cmd="filter_metrics $print_average_flag $use_rel_time_flag $pair $d_flag $s_flag \"$ganglia_metrics_dir\" "
		msg "Running $_cmd"

		filter_metrics $print_average_flag $use_rel_time_flag $pair $d_flag $s_flag "$ganglia_metrics_dir" &

	done

	return 0
}

optstring="AR0:m:s:d:g:r:f:p:"
while getopts $optstring opt; do
	case $opt in
		A)
			print_average_flag="-A"
			;;
		R)
			use_rel_time_flag="-R"
			;;
		0)
			delay="$OPTARG"
			;;
		r)
			regexp="$OPTARG"
			;;
		f)
			field_sep="$OPTARG"
			;;
		d)
			outputdir="$OPTARG"
			;;
		p)
			iter_dir_prefix="$OPTARG"
			;;
		g)
			ganglia_metrics_dir="$OPTARG"
			;;
		s)
			suffix="$OPTARG"
			;;
		m)
			metrics="$OPTARG"
			;;
		?)
			echo "invalid option -$opt" 1>&2
			;;
		:)
			echo "-$opt requires argument"
			exit 1
			;;
	esac
done

shift $((OPTIND-1))

if (($# == 0 )); then
	disp_opts -h -n 40 $0 2>/dev/null
	exit 1
fi

if [ -z "$delay" ]; then
	delay=0
fi

if [ -z "$iter_dir_prefix" ]; then
	iter_dir_prefix="it-"
fi

if [ -z "$suffix" ]; then
	suffix="-fil"
	msg "no -s suffix specified; using $suffix"
fi

if [ -z "$field_sep" ]; then
	field_sep=':'
	msg "no -f field_sep specified; using $field_sep"
fi

if [ -z "$ganglia_metrics_dir" ]; then
	ganglia_metrics_dir="$PWD/$GANGLIA_DATA_DIR"
	if [ ! -d "$ganglia_metrics_dir" ]; then
		error "-g <dir> unspecified and $ganglia_metrics_dir is not a valid dir"
		exit 1
	fi
	msg "ganglia src dir unspecified; using $ganglia_metrics_dir"
fi

if [ -z "$metrics" ]; then
	metrics="$GANGLIA_METRICS"
	msg "no -s suffix specified; using $GANGLIA_METRICS"
fi

if [ -z "$outputdir" ]; then
	outputdir="$PWD"
fi

if [ -z "$regexp" ]; then
	int='[[:digit:]]+'
	float="[[:digit:]\-\.\E\e\+]+"
	sep1=': '
	sep2=','
	regexp="$int$sep1$int$sep2$float"
	warn "regexp unspecified; using $regexp"
fi

for file in "$@"; do
	if [ ! -r "$file" ]; then
		echo "$(basename $0): Warning: $file is not readable" 1>&2
		continue
	fi
	print_metrics_per_iteration
done
