#!/bin/bash
#
# gen_pncg_data <spark_stdout>
#
# Generate the f,g, and time per iteration data from an output logfile
#
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Sat 11 Apr 2015 10:49:33 PM EDT
# Last Modified: Fri 24 Apr 2015 09:15:23 AM EDT
# =================================================

. spark_vars

# set constants 
TCOL=1 # real time (epoch seconds)
KCOL=3 # iteration number
FCOL_PNCG=7
GCOL_PNCG=6
FCOL_ALS=4
GCOL_ALS=5
REGEX='^[[:digit:]]+:[[:space:]]*[ALSPNCG]+:[[:space:]]*[[:digit:]]+:'
delim=":"
format="%10.8g$delim%10.8g\n"

is_als_log() {
	grep -q -m 1 -e 'ALS:' "$logfile"
	return $?
}

print_filtered_lines() {
	grep -E -e "$REGEX" "$logfile"
}

# print_values <$col> $logfile
print_values() { 
	col="$@"
	if [ -n "$use_abs_time" ]; then
		t_col=$TCOL 
		print_filtered_lines \
			| cut -d "$delim" -f $t_col,$col \
			| rmoffset -f "'$format'" -c 1 - 2>/dev/null
	else
		t_col=$KCOL 
		print_filtered_lines \
			| cut -d "$delim" -f $t_col,$col
	fi
}

# octave script to get the iteration time as the diff of the real time
time_diff_script() {
	cat <<EOF
		t = dlmread(stdin,'');
		n = length(t);
		printf("$format", [1:(n-1); diff(t)']);
EOF
}

print_time_per_iteration() {
	print_filtered_lines \
		| cut -d "$delim" -f $TCOL \
		| octave -q <(time_diff_script)
}

SCRIPT_NAME=$(basename $0)
msg () {
	if [ -n "$verbose_flag" ]; then
		echo "$SCRIPT_NAME: $@" 1>&2
	fi
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}

if (($# == 0)); then
	disp_opts -h -n 10 $0 2>/dev/null
	exit 0
fi

optstring="vT0d:fgtak"
while getopts "$optstring" opt; do
	case "$opt" in
		v)
			verbose_flag="true"
			;;
		0)
			delay_flag="-0 $OPTARG" 	# for spark_read_iters -0 <delay>
			;;
		d)
			output_dir_flag="-d $OPTARG" 	# for spark_read_iters -d <output_dir>
			;;
		f)
			print_f="true"
			;;
		g)
			print_g="true"
			;;
		t)
			use_abs_time="true"
			;;
		T)
			print_iter_time="true"
			;;
		a)
			print_avg_iter_time="true"
			;;
		k)
			gen_iter_metrics="true"
			;;
		:)
			error "-$opt requires argument" 
			;; 
		?)
			error invalid option
			;; 
	esac
done
shift $((OPTIND - 1))

for logfile in "$@"; do

	if [ -d "$logfile" ]; then
		# try "$logfile/spark_stdout"
		logfile="$logfile/$SPARK_LOG_STDOUT"
		warn "Directory given; trying $logfile"
		if [ ! -f "$logfile" ]; then
			warn "$logfile" is not a readable file.
		fi
		continue
	fi

	logdir=$(dirname $logfile)

	if [ -n "$gen_iter_metrics" ]; then
		msg "Generating ganglia metrics per iteration from $logfile"
		# check for ganglia dir
		ganglia_dir="$logdir/$GANGLIA_DATA_DIR"
		if [ ! -d "$ganglia_dir" ]; then
			error "$ganglia_dir is not a valid directory; cannot run spark_read_iters"
		else
			spark_read_iters -A -R $delay_flag -r "$REGEX" -f "$delim" -d "$logdir/iters" -g "$ganglia_dir"  "$logfile"

			if [ $? ]; then
				error "spark_read_iters failed; exiting"
				exit 1
			fi
		fi
	fi

	if [ -n "$print_iter_time" ] || [ -n "$print_avg_iter_time" ]; then
		msg "Computing the time duration per iteration from $logfile"
		if [ -n "$print_avg_iter_time" ]; then
			# print_time_per_iteration | meanstd -d 1 -s -c 2 
			print_time_per_iteration \
				| meanstd -d 1 -s -c 2 -f "'$format'" 2>/dev/null
		else
			print_time_per_iteration
		fi
	fi

	if [ -n "$print_f" ]; then
		msg "Printing f from $logfile"
		if is_als_log; then
			print_values $FCOL_ALS
		else
			print_values $FCOL_PNCG
		fi
	fi

	if [ -n "$print_g" ]; then
		msg "Printing g from $logfile"
		if is_als_log; then
			print_values $GCOL_ALS
		else
			print_values $GCOL_PNCG
		fi
	fi

done

exit 0
# grep -E -e "$REGEX" "$logfile"
# meanstd -s -1 -d 2 -c 2:8 it-4/cpu_idle-fil  | rmoffset -c 1
