#!/bin/bash
#
# spark_run_local [-d outputDir] [-C Class] assembly.jar
#
# spark_run_local -v[erbose] -L[ogsCopied] [-M memory] [-N AppName] [-v(erbose)] -d outputDir -C Class assembly.jar
#
# Run spark-submit in local mode. Specific to local 
# laptop development.
#
#	Optionally specify AppName, and (main) Class
# 
#	If no classname is given, you will be prompted for one, since it is
# the entry point to Spark execution (main).
# 
# This script will call . spark_vars for global definitions.
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Tue 17 Feb 2015 10:45:57 PM EST
# Last Modified: Sat 11 Apr 2015 12:06:48 AM EDT
# =================================================

SLAVE_MEM_ARG=""
SCRIPT_NAME=$(basename $0)

msg () {
	echo "$SCRIPT_NAME: $@" 1>&2
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}
# this function only works if you clean out the log directory
get_worker_logs()
{
	key=$(date +%Y%m%d)
	src=$SPARK_WORKER_LOG_DIR
	log=$(ls -1t $src | head -n 1)
	if ! grep -qm 1 "$key" <<< "$log"; then
		warn "WARNING: log directory $log has incorrect timestamp."
	fi
	echo $SPARK_WORKER_LOG_DIR/$log
}

get_time() {
	date +%s
}

# parse commandline arguments
GETOPT_STRING="c:vj:C:N:d:LM:"
while getopts $GETOPT_STRING opt; do
	case $opt in
		c)
			num_cores="$OPTARG"
			msg "Running with $num_cores local executors"
			;;
		v)
			VERBOSE="true"
			;;
		M)
			MEMORY="$OPTARG"
			;;
		N)
			APPLICATION_NAME="$OPTARG"
			;;
		d)
			OUT_DIR="$OPTARG"
			;;
		C)
			CLASS_NAME="$OPTARG"
			;;
		L)
			GET_LOGS="true"
			;;
		:)
			error "-$opt requires argument"
			exit 1
			;;
		\?) 
			warn "invalid option -$opt"
			;;
	esac
done
shift $((OPTIND-1))

if (($# == 0)); then
	error "No jar specified."
	disp_opts -h -n 30 $0 2>/dev/null
	exit 1
fi

JAR=$1

# load all defaults in spark vars
. spark_vars

if [ -z "$num_cores" ]; then
	num_cores='*'
fi

if [ -z "$JAR" ] || [ ! -f "$JAR" ]; then
	error "jar: $JAR could not be found or is not a regular file"
	exit 1
fi

if [ -z "$OUT_DIR" ]; then
	OUT_DIR=$(newdir $(tr -d ' ' <<< "$CLASS_NAME" | tr 'A-Z' 'a-z'))
	warn "-d outputDir unspecified; using $OUT_DIR"
fi

if [ ! -d "$OUT_DIR" ]; then
	warn "Creating $OUT_DIR"
	mkdir -p "$OUT_DIR"
fi

if [ -z "$CLASS_NAME" ]; then
	warn "Classname unspecified"
	read -p "Enter classname >>> " CLASS_NAME
fi

if [ -z "$APPLICATION_NAME" ]; then
	APPLICATION_NAME=$(tr 'A-Z' 'a-z' <<< "$CLASS_NAME")-$t_start
fi

if [ -z "$SLAVE_MEM" ]; then
	SLAVE_MEM="$SPARK_MAX_MEM"
fi

msg "Running $JAR:$CLASS_NAME locally and saving output to $OUT_DIR."
t_start=$(get_time)
if [ -n "$VERBOSE" ]; then
	# VERBOSE option: use tee to copy stderr to stdout
	spark-submit \
		--master "local[$num_cores]" \
		--name "$APPLICATION_NAME" \
		--class "$CLASS_NAME" \
		--driver-memory "$MEMORY" \
		"$JAR" \
		"$@"  \
		1> >(tee $SPARK_LOG_STDOUT) \
		2> >(tee $SPARK_LOG_STDERR | grep -Ei -e 'job')
else
	spark-submit \
		--master "local[$num_cores]" \
		--name "$APPLICATION_NAME" \
		--class "$CLASS_NAME" \
		--driver-memory "$MEMORY" \
		"$JAR" \
		"$@"  \
		1> >(tee $SPARK_LOG_STDOUT) \
		2> $SPARK_LOG_STDERR
fi
STATUS="$?"
t_end=$(get_time)

if [ "$STATUS" -ne 0 ]; then
	cat <<EOF

FAILURE: spark-submit exited with status: "$STATUS" 
You may have to clean up "$SPARK_LOG_DIR/$APPLICATION_NAME/" 

First exception in:

EOF
	grep -m 1 -A 10 -n 'Exception in ' $SPARK_LOG_STDERR
	JOB_FAILED="true"
fi

msg "Saving stderr and stdout in $OUT_DIR"
if [ -n "$OUT_DIR" ] && [[ "$OUT_DIR" != "$PWD" ]]; then
	mv $SPARK_LOG_STDERR $OUT_DIR
	mv $SPARK_LOG_STDOUT $OUT_DIR
	cd $OUT_DIR
fi

# copy worker logs
if [ -n "$GET_LOGS" ]; then
	log_dir=$(get_worker_logs)

	if [ -d "$log_dir" ]; then
		msg "Copying $log_dir/ to $OUT_DIR/$SPARK_WORKER_LOGS/" 
		rsync -az --exclude='*.jar' "$log_dir/" $SPARK_WORKER_LOGS
	fi
fi

# save t_start and t_end to filter afterwards
msg "Saving t0:$t_start to $OUT_DIR/$SPARK_LOG_TIME"
msg "Saving t1:$t_start to $OUT_DIR/$SPARK_LOG_TIME"
echo $t_start > $SPARK_LOG_TIME
echo $t_end >> $SPARK_LOG_TIME

# save exit status to file in current dir
msg "Saving status:$STATUS to $SPARK_EXIT_STATUS"
echo $STATUS > "$SPARK_EXIT_STATUS"_"$STATUS"

exit $STATUS
